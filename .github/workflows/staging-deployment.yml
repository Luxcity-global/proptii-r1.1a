name: Staging Deployment

on:
  push:
    branches:
      - staging
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Create env file
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env.staging
          echo "VITE_AZURE_AD_CLIENT_ID=${{ secrets.VITE_AZURE_AD_CLIENT_ID }}" >> .env.staging
          echo "VITE_AZURE_STORAGE_URL=${{ secrets.VITE_AZURE_STORAGE_URL }}" >> .env.staging
          echo "VITE_AZURE_CDN_ENDPOINT=${{ secrets.VITE_AZURE_CDN_ENDPOINT }}" >> .env.staging
          echo "VITE_AZURE_APP_INSIGHTS_KEY=${{ secrets.VITE_AZURE_APP_INSIGHTS_KEY }}" >> .env.staging
          echo "VITE_ENVIRONMENT=staging" >> .env.staging
          echo "VITE_ENABLE_DEBUG_LOGGING=true" >> .env.staging
          echo "VITE_ENABLE_PERFORMANCE_MONITORING=true" >> .env.staging
          echo "VITE_ENABLE_ERROR_REPORTING=true" >> .env.staging
          echo "VITE_ENABLE_CSP=true" >> .env.staging
          echo "VITE_ENABLE_HSTS=true" >> .env.staging
          echo "ALERT_WEBHOOK_URL=${{ secrets.ALERT_WEBHOOK_URL }}" >> .env.staging

      - name: Build
        run: npm run build:staging

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"
          api_location: ""
          output_location: ""
          app_build_command: "npm run build:staging"
          
      - name: Run Post-Deployment Tests
        run: |
          npm run test:e2e:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

    - name: Run post-deployment validation
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 30
        curl -f ${{ secrets.VITE_AZURE_STORAGE_URL }}/index.html || exit 1

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Staging Deployment Failed',
            body: `Deployment to staging environment failed.\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}\nSee: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          }); 

    - name: Run Monitoring Check
      run: npm run monitor:staging
      env:
        ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}
        STAGING_URL: ${{ secrets.STAGING_URL }}

    - name: Check Application Insights
      run: |
        npm run alerts:staging
        if [ $? -ne 0 ]; then
          echo "::warning::Performance issues detected in staging environment"
        fi

    - name: Update Status Page
      if: always()
      run: |
        curl -X POST ${{ secrets.STATUS_PAGE_UPDATE_URL }} \
          -H "Authorization: Bearer ${{ secrets.STATUS_PAGE_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "environment": "staging",
            "status": "${{ job.status }}",
            "lastChecked": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
          }'

  monitoring:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Extended Monitoring
        run: npm run monitor:staging:watch
        env:
          ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}
          VITE_AZURE_APP_INSIGHTS_KEY: ${{ secrets.VITE_AZURE_APP_INSIGHTS_KEY }}
          STAGING_URL: ${{ secrets.STAGING_URL }}

      - name: Generate Monitoring Report
        if: always()
        run: |
          echo "## Staging Environment Status Report" > monitoring-report.md
          echo "Generated at: $(date -u)" >> monitoring-report.md
          echo "### Health Checks" >> monitoring-report.md
          npm run monitor:staging --report >> monitoring-report.md

      - name: Upload Monitoring Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report
          path: monitoring-report.md 